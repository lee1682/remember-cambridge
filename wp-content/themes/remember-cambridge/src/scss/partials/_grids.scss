$grid__cols: 12;

$map-grid-props: ('': 0,
  '-sm': $tablet-port,
  '-md': $tablet-land,
  '-lg': $laptop,
  '-xl': $desktop);

@mixin create-mq($breakpoint, $min-or-max) {
  @if($breakpoint==0) {
    @content;
  }

  @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1) {
      @content;
    }
  }
}

@mixin create-col-classes($modifier, $grid-cols, $breakpoint) {
  @if($modifier=='') {
    $modifier: '';
  }

  @include create-mq($breakpoint, 'min') {
    .col#{$modifier}-offset-0 {
      margin-left: 0;
    }

    @for $i from 1 through $grid-cols {
      .col#{$modifier}-#{$i} {
        width: (100 / ($grid-cols / $i)) * 1%;
        flex-basis: (100 / ($grid-cols / $i)) * 1%;
        padding: 0 1rem;
        box-sizing: border-box;
        max-width: (100 / ($grid-cols / $i)) * 1%;
        flex: 0 0 (100 / ($grid-cols / $i)) * 1%;
      }

      .col#{$modifier}-offset-#{$i} {
        margin-left: (100 / ($grid-cols / $i)) * 1%;
      }
    }
  }
}

@each $modifier,
$breakpoint in $map-grid-props {
  @if($modifier=='') {
    $modifier: '-xs';
  }

  @include create-mq($breakpoint - 1, 'max') {
    .hidden#{$modifier}-down {
      display: none !important;
    }
  }

  @include create-mq($breakpoint, 'min') {
    .hidden#{$modifier}-up {
      display: none !important;
    }
  }
}

.container {
  max-width: $tablet-land * 1;
  margin: 0 auto;

  &-fluid {
    margin: 0;
    max-width: 100%;
  }

  &-medium {
    max-width: $laptop * 1;
    margin: 0 auto;
  }

  &-large {
    max-width: 1400px;
    margin: 0 auto;
  }

  &-row {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    flex: 0 1 auto;
  }
}

.container-inverse {
  flex-direction: row-reverse;
}

@each $modifier,
$breakpoint in $map-grid-props {
  @include create-col-classes($modifier, $grid__cols, $breakpoint);
}

.center-aligned{
  display:flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}